---
---
<div id="shopping-cart" class="fixed right-0 top-0 h-full w-80 bg-neutral-800 transform translate-x-full transition-transform duration-300 ease-in-out z-50 shadow-xl">
    <div class="flex flex-col h-full">
        <div class="p-4 border-b border-gray-700">
            <div class="flex justify-between items-center">
                <h2 class="text-xl font-bold text-white">Shopping Cart</h2>
                <button id="close-cart" class="text-gray-400 hover:text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <div class="mt-4 p-3 bg-neutral-700 rounded">
                <div class="flex justify-between items-center">
                    <div>
                        <span class="text-gray-400 text-sm">Name:</span>
                        <span id="cart-nickname" class="text-white ml-2"></span>
                    </div>
                    <button
                            id="change-nickname"
                            class="text-yellow-500 hover:text-yellow-400 text-sm font-semibold"
                    >
                        Change
                    </button>
                </div>
            </div>
        </div>

        <div class="flex-1 overflow-y-auto p-4">
            <div id="cart-items" class="space-y-4">
                <!-- Cart items will be inserted here -->
            </div>
        </div>

        <div class="p-4 border-t border-gray-700">
            <div class="flex justify-between items-center mb-4">
                <span class="text-white">Total:</span>
                <span id="cart-total" class="text-white font-bold">0.00 EUR</span>
            </div>
            <button id="checkout-button" class="w-full bg-yellow-500 hover:bg-yellow-300 text-black px-4 py-2 font-bold rounded-md transition-colors duration-300">
                Checkout
            </button>
        </div>
    </div>
</div>

<script>
    import Tebex from "@tebexio/tebex.js"
    import { cartStore } from '../../../utils/cart_store';

    const cart = document.getElementById('shopping-cart');
    const closeCart = document.getElementById('close-cart');
    const cartItems = document.getElementById('cart-items');
    const cartTotal = document.getElementById('cart-total');
    const checkoutButton = document.getElementById('checkout-button');

    document.addEventListener('DOMContentLoaded', () => {
        const items = cartStore.getItems();
        const total = cartStore.getTotalPrice();
        updateCartDisplay(items, total);

        const savedNickname = localStorage.getItem('minecraft-nickname');
        if (cartNickname && savedNickname) {
            cartNickname.textContent = savedNickname;
        }
    });

    let isCartVisible = false;

    function showCart() {
        cart?.classList.remove('translate-x-full');
        isCartVisible = true;
    }

    function hideCart() {
        cart?.classList.add('translate-x-full');
        isCartVisible = false;
    }

    function toggleCart() {
        if (isCartVisible) {
            hideCart();
        } else {
            showCart();
        }
    }

    function updateCartDisplay(items: any[], total: number) {
        if (cartItems) {
            cartItems.innerHTML = items.map(item => `
                <div class="flex items-center gap-2 bg-gray-700 p-2 rounded">
                    <img src="${item.image}" alt="${item.name}" class="w-12 h-12 object-cover rounded">
                    <div class="flex-1">
                        <h3 class="text-white font-semibold">${item.name}</h3>
                        <div class="flex items-center gap-2">
                            <button class="quantity-btn text-white" data-id="${item.id}" data-action="decrease">-</button>
                            <span class="text-white">${item.quantity}</span>
                            <button class="quantity-btn text-white" data-id="${item.id}" data-action="increase">+</button>
                        </div>
                    </div>
                    <div class="text-right">
                        <p class="text-white">${(item.price * item.quantity).toFixed(2)} ${item.currency}</p>
                        <button class="remove-item text-red-400 hover:text-red-300" data-id="${item.id}">Remove</button>
                    </div>
                </div>
            `).join('');
        }

        if (cartTotal) {
            cartTotal.textContent = `${total.toFixed(2)} EUR`;
        }
    }

    const cartNickname = document.getElementById('cart-nickname');
    const changeNicknameBtn = document.getElementById('change-nickname');

    function updateNicknameDisplay() {
        const nickname = localStorage.getItem('minecraft-nickname');
        if (cartNickname && nickname) {
            cartNickname.textContent = nickname;
        }
    }

    closeCart?.addEventListener('click', hideCart);

    document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;

        if (target.classList.contains('quantity-btn')) {
            const id = Number(target.dataset.id);
            const action = target.dataset.action;
            const item = cartStore.getItems().find(item => item.id === id);

            if (item) {
                if (action === 'increase') {
                    cartStore.updateQuantity(id, item.quantity + 1);
                } else if (action === 'decrease') {
                    cartStore.updateQuantity(id, item.quantity - 1);
                }
            }
        }

        if (target.classList.contains('remove-item')) {
            const id = Number(target.dataset.id);
            cartStore.removeItem(id);
        }
    });

    checkoutButton?.addEventListener('click', async () => {
        const nickname = localStorage.getItem('minecraft-nickname');
        const items = cartStore.getItems();

        if (!nickname || items.length === 0) {
            if (!nickname) {
                window.dispatchEvent(new Event('show-nickname-modal'));
            }
            return;
        }

        try {
            const basketResponse = await fetch(
                `https://headless.tebex.io/api/accounts/${import.meta.env.PUBLIC_TEBEX_TOKEN}/baskets`,
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        username: nickname,
                        complete_url: `${window.location.origin}/store`,
                        cancel_url: `${window.location.origin}/store`
                    })
                }
            );

            if (!basketResponse.ok) {
                throw new Error('Failed to create basket');
            }

            const basketData = await basketResponse.json();
            const basketIdent = basketData.data.ident;

            for (const item of items) {
                await fetch(
                    `https://headless.tebex.io/api/baskets/${basketIdent}/packages`,
                    {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            package_id: item.id,
                            quantity: item.quantity
                        })
                    }
                );
            }

            Tebex.checkout.init({
                ident: basketIdent,
                theme: "dark"
            });

            Tebex.checkout.launch();

        } catch (error) {
            console.error('Checkout process failed:', error);
            alert('Failed to start checkout process. Please try again.');
        }
    });

    changeNicknameBtn?.addEventListener('click', () => {
        window.dispatchEvent(new Event('show-nickname-modal'));
    });

    window.addEventListener('cart-updated', ((e: CustomEvent) => {
        updateCartDisplay(e.detail.items, e.detail.total);
    }) as EventListener);

    window.addEventListener('add-to-cart', () => {
        // console.log('Add to cart event received'); // Debug
        showCart();
    });

    window.addEventListener('nickname-set', ((e: CustomEvent) => {
        updateNicknameDisplay();
    }) as EventListener);

    window.addEventListener('toggle-cart', () => {
        toggleCart();
    });

    updateNicknameDisplay();
</script>

